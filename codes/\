 function [qq]=fftStepSmits(stepStr,preStr)
[ntimesteps, rMin, rMax, ss, ncs, plotOn, azimuthalSet ,azimuthalSetSize ,printStatus ,lags, blocLength, saveDir]=constants();
  %[xcorrDoneAnticipate_cs]=initData2("xcorrDoneAnticipate_cs");
%ntimestepsX = 2*ntimesteps - 1; % number of offsets with xcorr.
% dont use.ntimestepsX = 2*ntimesteps - 1; % number of offsets with xcorr.
  if stepStr=="readDataAndFindVeloFluctuation"
    [qMinusQbar_noCsYet]=initData2("qMinusQbar_noCsYet"); % initialize avg struct
    [qMinusQbar]=initData2("qMinusQbar"); % initialize avg struct
    [myPreFft_noCsYet]=initData2("myPreFft_noCsYet");
    [avgPreFft_noCsYet]=initData2("avgPreFft_noCsYet");
    [xcorrDone]=initData2("azimuthDoneXcorrDone");
    [qMinusQbar_noCsYet]=initData2("qMinusQbar_noCsYet");
    [xdirNew]=initData2("xdirNew");
        %[corrMatSmits]=initData2("corrMatSmits");
        [corrMatSmits]=initData2("corrMatSmits_noCs");

    [xdirPostFft]=initData2("xdirPostFft");
    [avgTimeEnd]=initData2("avgTimeEnd");

    for c = 1:ncs  % crosssection
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    %% Step A) load a chonk into memory and read circles in.
    for timeBloc=1:blocLength
    parfor t = 1:ntimesteps % time % <-- nb, this is the parfor loop.
    myPreFft_noCsNoTimeYet=readCircles2(timeBloc*t,c);
    myPreFft_noCsYet(t).circle=myPreFft_noCsNoTimeYet;
    sprintf('%s','pause')
    end % parfor
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    % after each block is done, find the average
    for t = 1:ntimesteps % time % <-- nb, this is the parfor loop.
      if timeBloc==blocLength && t==ntimesteps
        lastStr="last";
      else
        lastStr="notLast";
      end
    [avgPreFft_noCsYet]=findQbar(t,c,myPreFft_noCsYet,avgPreFft_noCsYet,lastStr); % find temporal average.
    end % end little t
    end % timeBloc
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    for timeBloc=1:blocLength
    for t = 1:ntimesteps % time % parfor
% load in time bloc again
        myPreFft_noCsNoTimeYet=readCircles2(timeBloc*t,c);
        myPreFft_noCsYet(t).circle=myPreFft_noCsNoTimeYet;
        % for each loaded timebloc, find qMinusQbar..
        [ qMinusQbar_noCsYet(t) ]=FindqMinusQbar(t,c,myPreFft_noCsYet(t),avgPreFft_noCsYet,qMinusQbar_noCsYet(t),"efficient");
    end % parfor t
    % this should be saved to disk immediately, for each timeBloc...
        sprintf('%s','saving qMinusQbar...')
        saveStr=[saveDir 'qMinusQbar[Case]C' num2str(ncs) 'T' num2str(ntimesteps) '[crossSec]' num2str(c) '[TimeBloc]' num2str(timeBloc) '.mat'       ];
        save(saveStr,'qMinusQbar_noCsYet','-v7.3');
        sprintf('%s%s','Saved velocity fluctuations into file ',saveStr);

    qq = qMinusQbar_noCsYet(t);
    end % timeblock

    % this does not store cc data.
    %[xcorrDone]=findAzimuthalModes4(t,c, qMinusQbar_noCsYet,xcorrDone,"alias")
    findAzimuthalModes5(t,c, qMinusQbar_noCsYet,corrMatSmits,"alias")

    sprintf('%s','start azimuthal')
    %qq = xcorrDone;

    end %c % yes, cross-section loop should indeed end here..
        %elseif stepStr=="azimuth"
        end % if

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% x-dir fft
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% read in one of the saved xcorrDone
%%%for timeBloc=1:blocLength
for currentCrossSec=1:ncs
saveStr=[saveDir 'corrMatSmits[Case]C' num2str(ncs) 'T' num2str(ntimesteps) '[crossSec]' num2str(currentCrossSec) '[TimeBloc]' num2str(timeBloc) '.mat'       ];
qq=open(saveStr);
sprintf('%s','start azimuthal')
% now re-organize:
% almost essential, that t,t' just be an array instead of a matrix, for reorg that.
% okay save to reference array that nts x nts case, but then
% also save to array the vectorized form.
for t=1:ntimesteps %parfor
   sprintf('%s','hi')
   % reshape nts x nts into arrayz:
   % reshape(myArray,[],1);
%for r=1:540 %
for m=1:azimuthalSetSize
  %aa=qq.xcorrDone(t).circle(m).dat(r,1); % that creates a hard copy, inefficient.
    % nb no rad anymore.
  aa=qq.corrMatSmits(m).dat(t1,t2); % that creates a hard copy, inefficient.
  xdirNew(t).RadialCircle(r).azimuth(m).dat(currentCrossSec,1) = aa;
end % m
%end % r
end % t (little)
sprintf('%s%d%s%d%s','done filling in a crosssec for timeBloc=', timeBloc, ' and t=',t,'.')
end % c


% begin fft x-dir
for t=1:ntimesteps % parfor
for r=1:540 % this should be 540..................
for m=1:azimuthalSetSize
  aa = xdirNew(t).RadialCircle(r).azimuth(m).dat;
  %ab = fft(aa(end/2:end));
  ab = fft(aa);
  xdirPostFft(t).RadialCircle(r).azimuth(m).dat = ab;
  %hold on;
  %plot(real(ab));
  %pause(0.1)
end % m
end % r
end % t (little)
        sprintf('%s','saving xdirPostFft...')
        saveStr=[saveDir 'xdirPostFft[Case]C' num2str(ncs) 'T' num2str(ntimesteps) '[crossSec]' num2str(c) '[TimeBloc]' num2str(timeBloc) '.mat'       ];
        save(saveStr,'xdirPostFft','-v7.3');
        sprintf('%s%s','Saved xdirpostfft into file ',saveStr);
% Time Averaging
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%5
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%5
aMat = zeros(540,1);
for t=1:ntimesteps
for c=1:ncs
for m=1:azimuthalSetSize
for r=1:540
   aa = xdirPostFft(t).RadialCircle(r).azimuth(m).dat(c,1);
   aMat(r) = r*aa;
   %aMat(r) = (1-r)*aa; % because its flipped (-> at: ).. (maybe dont flip if feel uncomfortable with that).
   %smits2016(t).cs(c).circle(m).dat(r,1) = r*aa; % R(t,t';k;m,r) and mult by r.
end % r
Rint = trapz(aMat);
Rmat_avg(t).cs(c).circle(m)= Rint; % smits17.eq.below.eq.2.4 % needs checking.

end % m
end % c
end % t (little)
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%5
%%%end % timeBloc

% set back in radial direction and time avergae for all timesteps!

        saveStr=[saveDir '/Ravg_r[Case]C' num2str(ncs) 'T' num2str(ntimesteps) '[crossSec]' num2str(c) '.mat'];
        save(saveStr,'Rmat_avg','-v7.3');

% average in r smits2016

%   smits2016(t).cs(c).circle(m).dat(r,1) = aa; % R(t,t';k;m,r)
% just call trapz. then operate on t -> eig wrt .

qq = xdirPostFft;


pod(qq);

 end % f
